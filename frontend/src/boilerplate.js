// const BOILERPLATES = {
//   python: 'print("Hello, World!")\n',
//   javascript: 'console.log("Hello, World!");\n',
//   java: 'public class Main {\n    public static void main(String[] args) {\n        System.out.println("Hello, World!");\n    }\n}\n',
//   c: '#include <stdio.h>\n\nint main() {\n    printf("Hello, World!\\n");\n    return ;\n}\n',
//   cpp: '#include <iostream>\n\nint main() {\n    std::cout << "Hello, World!" << std::endl;\n    return 0;\n}\n',
//   go: 'package main\n\nimport "fmt"\n\nfunc main() {\n    fmt.Println("Hello, World!")\n}\n',
//   rust: 'fn main() {\n    println!("Hello, World!");\n}\n',
//   typescript: 'console.log("Hello, World!");\n',
//   ruby: 'puts "Hello, World!"',
//   swift: 'print("Hello, World!")',
//   php: '<?php echo "Hello, World!"; ?>\n',
//   ocaml: 'print_endline "Hello, World!";;\n',
//   vb: 'Module HelloWorld\n    Sub Main()\n        Console.WriteLine("Hello, World!")\n    End Sub\nEnd Module\n',
//   fsharp: 'printfn "Hello, World!"\n',
//   lua: 'print("Hello, World!")\n',
//   haskell: 'main = putStrLn "Hello, World!"\n',
//   dart: 'void main() {\n  print("Hello, World!");\n}\n',
//   elixir: 'IO.puts("Hello, World!")\n',
//   julia: 'println("Hello, World!")\n',
//   racket: '#lang racket\n(displayln "Hello, World!")\n',
//   powershell: 'Write-Output "Hello, World!"\n',
//   bash: 'echo "Hello, World!"\n',
//   r: 'cat("Hello, World!\\n")\n',
//   scala: 'object Main extends App {\n  println("Hello, World!")\n}\n',
//   perl: 'print "Hello, World!\\n";\n',
//   kotlin: 'fun main() {\n    println("Hello, World!")\n}\n',
//   csharp:
//     'using System;\nclass Program {\n    static void Main() {\n        Console.WriteLine("Hello, World!");\n    }\n}\n',
// };

const BOILERPLATES = {
  python: `import math\nnum = 25\nprint("Square root is", math.isqrt(num))`,
  javascript: `const num = 25;\nconsole.log("Square root is", Math.floor(Math.sqrt(num)));`,
  java: `public class Main {\n    public static void main(String[] args) {\n        int num = 25;\n        System.out.println("Square root is " + (int)Math.sqrt(num));\n    }\n}`,
  c: `#include <stdio.h>\n#include <math.h>\n\nint main() {\n    int num = 25;\n    printf("Square root is %d", (int)sqrt(num));\n    return 0;\n}`,
  cpp: `#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main() {\n    int num = 25;\n    cout << "Square root is " << (int)sqrt(num);\n    return 0;\n}`,
  go: `package main\n\nimport (\n    "fmt"\n    "math"\n)\n\nfunc main() {\n    num := 25\n    fmt.Println("Square root is", int(math.Floor(math.Sqrt(float64(num)))))\n}`,
  rust: `fn main() {\n    let num = 25;\n    println!("Square root is {}", (num as f64).sqrt().floor() as i32);\n}`,
  typescript: `const num: number = 25;\nconsole.log("Square root is", Math.floor(Math.sqrt(num)));`,
  ruby: `num = 25\nputs "Square root is #{Math.sqrt(num).floor}"`,
  swift: `import Foundation\nlet num = 25\nprint("Square root is", Int(sqrt(Double(num))))`,
  php: `<?php\n$num = 25;\necho "Square root is " . floor(sqrt($num));\n?>`,
  ocaml: `let num = 25 in\nprint_endline ("Square root is " ^ string_of_int (int_of_float (sqrt (float_of_int num))))`,
  vb: `Module Module1\n    Sub Main()\n        Dim num As Integer = 25\n        Console.WriteLine("Square root is " & Math.Floor(Math.Sqrt(num)))\n    End Sub\nEnd Module`,
  lua: `local num = 25\nprint("Square root is " .. math.floor(math.sqrt(num)))`,
  haskell: `main = print ("Square root is " ++ show (floor (sqrt 25)))`,
  dart: `import 'dart:math';\nvoid main() {\n  const num = 25;\n  print('Square root is \${sqrt(num.toDouble()).floor()}');\n}`,

  elixir: `num = 25\nIO.puts("Square root is #{:math.sqrt(num) |> Float.floor() |> trunc}")`,
  julia: `num = 25\nprintln("Square root is ", floor(Int, sqrt(num)))`,
  racket: `#lang racket\n(displayln (string-append "Square root is " (number->string (floor (sqrt 25)))))`,
  powershell: `$num = 25\nWrite-Output "Square root is $([math]::Floor([math]::Sqrt($num)))"`,
  bash: `num=25\nsqrt=$(echo "scale=0; sqrt($num)" | bc -l | cut -d'.' -f1)\necho "Square root is $sqrt"`,
  r: `num <- 25\ncat("Square root is", floor(sqrt(num)))`,
  scala: `object Main extends App {\n  val num = 25\n  println("Square root is " + Math.floor(Math.sqrt(num)).toInt)\n}`,
  perl: `my $num = 25;\nprint "Square root is ", int(sqrt($num));`,
  csharp: `using System;\n\nclass Program {\n    static void Main() {\n        int num = 25;\n        Console.WriteLine("Square root is " + (int)Math.Floor(Math.Sqrt(num)));\n    }\n}`,
};

export default BOILERPLATES;
